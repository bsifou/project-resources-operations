(ns app.model.work-line
  (:require [com.fulcrologic.fulcro.mutations :refer [defmutation]]
            [com.fulcrologic.fulcro.components :as comp]
            [com.fulcrologic.fulcro.algorithms.merge :as merge]
            [clojure.set :as set]
            [app.math :as math]
            [com.fulcrologic.fulcro.algorithms.form-state :as fs]
            [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]
            [taoensso.timbre :as log]))


(defn item-valid?
  "A user-written item validator (by field)"
  [#_{:item/keys [title in-stock price] :as item} field] true
  #_(try
    (case field
      :item/title (boolean (seq title))
      :item/price (math/> price 0)
      :item/in-stock (math/>= in-stock 0)
      true)
    (catch :default _
      false)
    ))

(def item-validator (fs/make-validator item-valid?))


(defmutation remove-work-line [{:work-line/keys [id]}]
  (action [{:keys [state]}]
          (swap! state (fn [s]
                         (-> s
                             (merge/remove-ident* [:work-line/id id] [:component/id :app.client/item-list :item-list/all-items])
                             (update :item/id dissoc id))))))

(defmutation try-save-work-line [{:work-line/keys [id]
                                  :keys      [diff]
                                  :as        params}]
  (action [{:keys [app state]}]
          (let [state-map       @state
                ident           [:work-line/id id]
                completed-state (fs/mark-complete* state-map ident)
                work-line            (get-in completed-state ident)
                WorkLine (comp/registry-key->class :app.client/WorkLine)
                item-props      (fdn/db->tree (comp/get-query WorkLine) item completed-state)
                valid?          (= :valid (item-validator item-props))]
            (if valid?
              (comp/transact! app [(save-work-line params)])
              (reset! state completed-state)))))

(defmutation remove-item [{:item/keys [id]}]
  (action [{:keys [state]}]
          (swap! state (fn [s]
                         (-> s
                             (merge/remove-ident* [:item/id id] [:component/id :app.client/item-list :item-list/all-items])
                             (update :item/id dissoc id))))))
